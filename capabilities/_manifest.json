{
  "briefing": [
    {
      "name": "briefing:makeWeeklyBriefing()",
      "description": "Makes a weekly briefing. Returns: A promise that resolves to a string indicating the status of the weekly briefing.",
      "examples": "    await makeWeeklyBriefing();"
    },
    {
      "name": "briefing:makeDailyBriefing()",
      "description": "Makes a daily briefing across all projects Returns: A promise that resolves to a string indicating the status of the daily briefing."
    },
    {
      "name": "briefing:makeProjectBriefing()",
      "description": "Makes a briefing on one particular project.",
      "parameters": [
        {
          "name": "project",
          "description": "The project name to make a briefing on."
        }
      ]
    },
    {
      "name": "briefing:retrieveFeedback()",
      "description": "Retrieves feedback on previous weekly summaries. Returns: A promise that resolves to an array of feedback items."
    },
    {
      "name": "briefing:identifyProjectsInMemories()",
      "description": "Identifies projects, project IDs, or project slugs mentioned in the memories. Returns: A promise that resolves to an array of project identifiers.",
      "parameters": [
        {
          "name": "processedMemories",
          "description": "The processed memories to identify projects in."
        }
      ]
    },
    {
      "name": "briefing:listTodoChanges()",
      "description": "Lists all todo changes from this week (added, edited, deleted). Returns: A promise that resolves to an array of todo changes."
    },
    {
      "name": "briefing:readCalendar()",
      "description": "Reads the calendar for the current week. Returns: A promise that resolves to an object containing calendar entries."
    },
    {
      "name": "briefing:generateProjectSummary()",
      "description": "Generates summary by project. Returns: A promise that resolves to an array of project summaries.",
      "parameters": [
        {
          "name": "worldInfoObject",
          "description": "An object containing information about the various projects."
        }
      ],
      "examples": "    await generateProjectSummary({ project, projectMemoryMap, todoChanges, calendarEntries });"
    },
    {
      "name": "briefing:generateMetaSummary()",
      "description": "Generates a meta-summary based on project summaries. Returns: A promise that resolves to a string containing the meta-summary.",
      "parameters": [
        {
          "name": "projectSummaries",
          "description": "The project summaries to base the meta-summary on."
        }
      ]
    },
    {
      "name": "briefing:formatSummary()",
      "description": "Formats the fact-based summary through a weekly summary prompt/template. Returns: A promise that resolves to a string containing the formatted summary.",
      "parameters": [
        {
          "name": "summary",
          "description": "The summary to format."
        }
      ]
    },
    {
      "name": "briefing:communicateSummary()",
      "description": "Creates new posts or threads in communication platforms. Returns: ",
      "parameters": [
        {
          "name": "message",
          "description": "The message to post."
        },
        {
          "name": "service",
          "description": "The service to post the message to - could be either  discord  or  missive  so far"
        }
      ]
    },
    {
      "name": "briefing:archiveSummary()",
      "description": "Saves an archived copy of the weekly summary. Returns: ",
      "parameters": [
        {
          "name": "summary",
          "description": "The summary to archive."
        }
      ]
    }
  ],
  "calculator": [
    {
      "name": "calculator:add()",
      "description": "Adds up an array of numbers. Returns: The sum of the numbers.",
      "parameters": [
        {
          "name": "numbers",
          "description": "The array of numbers to be added."
        }
      ]
    },
    {
      "name": "calculator:subtract()",
      "description": "Subtracts the numbers in the array. Returns: The result of subtracting the numbers.",
      "parameters": [
        {
          "name": "numbers",
          "description": "The array of numbers to subtract."
        }
      ]
    },
    {
      "name": "calculator:multiply()",
      "description": "Multiplies an array of numbers. Returns: The product of the numbers.",
      "parameters": [
        {
          "name": "numbers",
          "description": "The array of numbers to multiply."
        }
      ]
    },
    {
      "name": "calculator:divide()",
      "description": "Divides an array of numbers. Returns: The result of dividing the numbers.",
      "parameters": [
        {
          "name": "numbers",
          "description": "The array of numbers to be divided."
        }
      ]
    },
    {
      "name": "calculator:pow()",
      "description": "Calculates the power of numbers. Returns: The result of the power calculation.",
      "parameters": [
        {
          "name": "numbers",
          "description": "The numbers to calculate the power of."
        }
      ]
    },
    {
      "name": "calculator:sqrt()",
      "description": "Calculates the square root of each number in the given array. Returns: The array of square roots.",
      "parameters": [
        {
          "name": "numbers",
          "description": "The array of numbers to calculate the square root for."
        }
      ]
    },
    {
      "name": "calculator:log()",
      "description": "Calculates the logarithm of an array of numbers. Returns: The result of the logarithm calculation.",
      "parameters": [
        {
          "name": "numbers",
          "description": "The array of numbers to calculate the logarithm for."
        }
      ]
    }
  ],
  "calendar": [
    {
      "name": "calendar:listAllCalendars()",
      "description": "This function uses the Google Calendar API to retrieve a list of all calendars available to the authenticated user. Returns: An array of calendar summaries and IDs.",
      "exceptions": [
        "If no calendars are found or an error occurs."
      ]
    },
    {
      "name": "calendar:accessEvent()",
      "description": "Retrieves a specific event from a Google Calendar. Returns: A promise that resolves to the event object.",
      "parameters": [
        {
          "name": "calendarId",
          "description": "The ID of the calendar."
        },
        {
          "name": "eventId",
          "description": "The ID of the event."
        }
      ]
    },
    {
      "name": "calendar:addPersonToEvent()",
      "description": "Adds a person to an event in the Google Calendar. Returns: A promise that resolves to the updated event.",
      "parameters": [
        {
          "name": "calendarId",
          "description": "The ID of the calendar."
        },
        {
          "name": "eventId",
          "description": "Th e ID of the event."
        },
        {
          "name": "attendeeEmail",
          "description": "The email address of the attendee to be added."
        }
      ]
    },
    {
      "name": "calendar:createEvent()",
      "description": "Creates a new event in the specified calendar. Returns: A promise that resolves to the created event.",
      "parameters": [
        {
          "name": "calendarId",
          "description": "The ID of the calendar."
        },
        {
          "name": "event",
          "description": "The event object to be created."
        }
      ]
    },
    {
      "name": "calendar:listEventsThisWeek()",
      "description": "Retrieves a list of events occurring within the current week for the specified calendar. Returns: A promise that resolves to the list of events.",
      "parameters": [
        {
          "name": "calendarId",
          "description": "The ID of the calendar to retrieve events from."
        }
      ]
    },
    {
      "name": "calendar:listEventsPrevWeek()",
      "description": "Retrieves a list of events occurring within the previous week for the specified calendar. Returns: A promise that resolves to the list of events.",
      "parameters": [
        {
          "name": "calendarId",
          "description": "The ID of the calendar to retrieve events from."
        }
      ]
    },
    {
      "name": "calendar:listEventsBetweenDates()",
      "description": "Retrieves a list of events occurring between the specified dates for the specified calendar. Returns: A promise that resolves to the list of events.",
      "parameters": [
        {
          "name": "calendarId",
          "description": "The ID of the calendar to retrieve events from."
        },
        {
          "name": "startDate",
          "description": "The start date of the range."
        },
        {
          "name": "endDate",
          "description": "The end date of the range."
        }
      ]
    }
  ],
  "chance": [],
  "discord-events": [],
  "drive": [
    {
      "name": "drive:getDriveInstance()",
      "description": "Get an instance of Google Drive. Returns: A promise that resolves to an instance of Google Drive."
    },
    {
      "name": "drive:listFiles()",
      "description": "List all files in the Google Drive. Returns: A promise that resolves to an array of file names and IDs."
    },
    {
      "name": "drive:readDoc()",
      "description": "Read a Google Doc from Drive and return it as a string Returns: A promise that resolves when the file has been read.",
      "parameters": [
        {
          "name": "fileId",
          "description": "The ID of the file to read."
        }
      ]
    },
    {
      "name": "drive:readFile()",
      "description": "Read a file from Google Drive. Returns: A promise that resolves when the file has been read.",
      "parameters": [
        {
          "name": "fileId",
          "description": "The ID of the file to read."
        }
      ]
    },
    {
      "name": "drive:createNewDocument()",
      "parameters": [
        {
          "name": "title",
          "description": "The title of the new document."
        },
        {
          "name": "text",
          "description": "The text to use as the content of the new document."
        }
      ]
    }
  ],
  "evaluate": [
    {
      "name": "evaluate:runCodeInSandbox()",
      "description": "Runs the provided code in a sandboxed environment. Returns: The result of the code execution.",
      "parameters": [
        {
          "name": "code",
          "description": "The code to be executed."
        },
        {
          "name": "sandbox",
          "description": "The sandbox object to provide the execution context."
        }
      ]
    }
  ],
  "github": [
    {
      "name": "github:createRepo()",
      "description": "Creates a new repository. Returns: The response from the Github API.",
      "parameters": [
        {
          "name": "repositoryName",
          "description": "The name of the repository."
        }
      ]
    },
    {
      "name": "github:cloneRepo()",
      "description": "Clones a repository.",
      "parameters": [
        {
          "name": "repositoryUrl",
          "description": "The URL of the repository."
        }
      ]
    },
    {
      "name": "github:listRepos()",
      "description": "Lists the repositories of the authenticated user. Returns: An array of repository names and descriptions."
    },
    {
      "name": "github:listUserRepos()",
      "description": "Lists the repositories of a user. Returns: An array of repository names and descriptions.",
      "parameters": [
        {
          "name": "username",
          "description": "The username of the user."
        }
      ]
    },
    {
      "name": "github:getProjectIdFromUrl()",
      "description": "Gets the project ID from a URL. Returns: The project ID, or null if the project was not found.",
      "parameters": [
        {
          "name": "url",
          "description": "The URL of the project."
        }
      ]
    },
    {
      "name": "github:listUserProjects()",
      "description": "Lists the projects of a user. Returns: A stringified array of project nodes.",
      "parameters": [
        {
          "name": "username",
          "description": "The username of the user."
        }
      ]
    },
    {
      "name": "github:listProjectColumnsAndCards()",
      "description": "Lists the project columns and cards of a project. Returns: A stringified array of project nodes.",
      "parameters": [
        {
          "name": "projectId",
          "description": "The ID of the project."
        }
      ]
    },
    {
      "name": "github:addDraftIssueToProject()",
      "description": "Adds a draft issue to a project. Returns: A stringified response from the Github API.",
      "parameters": [
        {
          "name": "projectId",
          "description": "The ID of the project."
        },
        {
          "name": "issueTitle",
          "description": "The title of the issue."
        },
        {
          "name": "issueBody",
          "description": "The body of the issue."
        }
      ]
    },
    {
      "name": "github:createBranch()",
      "description": "Creates a branch in a repository. Returns: The response from the Github API.",
      "parameters": [
        {
          "name": "repositoryFullName",
          "description": "The full name of the repository, in the format of owner/repo."
        },
        {
          "name": "branchName",
          "description": "The name of the branch."
        }
      ]
    },
    {
      "name": "github:listBranches()",
      "description": "Lists the branches of a repository. Returns: An array of branch objects.",
      "parameters": [
        {
          "name": "repositoryName",
          "description": "The name of the repository."
        }
      ]
    },
    {
      "name": "github:createFile()",
      "description": "Creates a file in a repository. Returns: The response from the Github API.",
      "parameters": [
        {
          "name": "repositoryName",
          "description": "The name of the repository."
        },
        {
          "name": "filePath",
          "description": "The path of the file."
        },
        {
          "name": "content",
          "description": "The content of the file."
        },
        {
          "name": "commitMessage",
          "description": "The commit message."
        }
      ]
    },
    {
      "name": "github:addIssueToRepo()",
      "description": "Adds an issue to a repository. Returns: A promise that resolves to the created issue data.",
      "parameters": [
        {
          "name": "ownerName",
          "description": "The name of the owner."
        },
        {
          "name": "repositoryName",
          "description": "The name of the repository."
        },
        {
          "name": "issueTitle",
          "description": "The title of the issue."
        },
        {
          "name": "issueBody",
          "description": "The body of the issue."
        }
      ]
    },
    {
      "name": "github:createGist()",
      "description": "Creates a gist. Returns: A message containing the URL of the created gist.",
      "parameters": [
        {
          "name": "fileName",
          "description": "The name of the file."
        },
        {
          "name": "description",
          "description": "The description of the gist."
        },
        {
          "name": "contentString",
          "description": "The content of the gist."
        }
      ]
    },
    {
      "name": "github:editFile()",
      "description": "Edits a file in a repository. Returns: The response from the Github API.",
      "parameters": [
        {
          "name": "repositoryName",
          "description": "The name of the repository."
        },
        {
          "name": "filePath",
          "description": "The path of the file."
        },
        {
          "name": "newContent",
          "description": "The new content of the file."
        },
        {
          "name": "commitMessage",
          "description": "The commit message."
        }
      ]
    },
    {
      "name": "github:deleteFile()",
      "description": "Deletes a file in a repository. Returns: The response from the Github API.",
      "parameters": [
        {
          "name": "repositoryName",
          "description": "The name of the repository."
        },
        {
          "name": "filePath",
          "description": "The path of the file."
        },
        {
          "name": "commitMessage",
          "description": "The commit message."
        }
      ]
    },
    {
      "name": "github:createPullRequest()",
      "description": "Creates a pull request in a repository. Returns: The response from the Github API.",
      "parameters": [
        {
          "name": "repositoryName",
          "description": "The name of the repository."
        },
        {
          "name": "title",
          "description": "The title of the pull request."
        },
        {
          "name": "headBranch",
          "description": "The name of the head branch."
        },
        {
          "name": "baseBranch",
          "description": "The name of the base branch."
        },
        {
          "name": "description",
          "description": "The description of the pull request."
        }
      ]
    },
    {
      "name": "github:readFileContents()",
      "description": "Reads the contents of a file in a repository. Returns: The response from the Github API.",
      "parameters": [
        {
          "name": "repositoryName",
          "description": "The name of the repository."
        },
        {
          "name": "filePath",
          "description": "The path of the file."
        }
      ]
    }
  ],
  "ingest": [
    {
      "name": "ingest:deepDocumentIngest()",
      "parameters": [
        {
          "name": "url",
          "description": "The arguments object that contains the URL or the text of the document to be ingested"
        }
      ]
    }
  ],
  "js": [
    {
      "name": "js:executeJavascriptAndCaptureImage()",
      "description": "Executes the provided JavaScript code in a headless browser using Puppeteer and captures a screenshot of the resulting page. Returns: A promise that resolves to an object containing the captured screenshot image as a Buffer.",
      "parameters": [
        {
          "name": "javascriptCode",
          "description": "The JavaScript code to be executed in the browser."
        }
      ],
      "exceptions": [
        "If an error occurs while executing the JavaScript code and capturing the image."
      ]
    }
  ],
  "manageorgs": [
    {
      "name": "manageorgs:createOrg()",
      "description": "Creates a new organization, label and post Returns: A promise that resolves to a string message indicating the result of the operation.",
      "parameters": [
        {
          "name": "name",
          "description": "The name of the organization."
        },
        {
          "name": "shortname",
          "description": "The short name of the organization. If not provided, the name is used and spaces are replaced with hyphens."
        },
        {
          "name": "aliases",
          "description": "The aliases of the organization."
        },
        {
          "name": "summary",
          "description": "The summary of the organization."
        },
        {
          "name": "note",
          "description": "The note for the organization."
        },
        {
          "name": "firstContact",
          "description": "The date of the first contact with the organization. If not provided, the current date is used."
        },
        {
          "name": "primaryEmailAddress",
          "description": "The primary email address of the organization."
        },
        {
          "name": "emailAddresses",
          "description": "The email addresses of the organization."
        }
      ],
      "exceptions": [
        "If there is an error with the Supabase operations."
      ]
    },
    {
      "name": "manageorgs:updateOrg()",
      "description": "Updates an existing organization in the database and sends a notification. Returns: A promise that resolves to a string message indicating the result of the operation.",
      "parameters": [
        {
          "name": "name",
          "description": "The current name of the organization."
        },
        {
          "name": "newName",
          "description": "The new name of the organization."
        },
        {
          "name": "newAliases",
          "description": "The new aliases of the organization."
        },
        {
          "name": "newFirstContact",
          "description": "The new date of the first contact with the organization."
        }
      ],
      "exceptions": [
        "If there is an error with the Supabase operations."
      ]
    }
  ],
  "manageprojects": [],
  "mastodon": [
    {
      "name": "mastodon:postStatus()",
      "description": "Posts a status to Mastodon. Returns: A promise that resolves to the response data from Mastodon.",
      "parameters": [
        {
          "name": "text",
          "description": "The text content of the status."
        },
        {
          "name": "image",
          "description": "The ID of the image to attach to the status."
        }
      ],
      "exceptions": [
        "If an error occurs while posting to Mastodon."
      ]
    }
  ],
  "mermaid": [
    {
      "name": "mermaid:convertMermaidDiagram()",
      "description": "Converts a Mermaid diagram text into an image. Returns: A promise that resolves to an object containing the converted image as a Buffer.",
      "parameters": [
        {
          "name": "diagramText",
          "description": "The Mermaid diagram text to convert."
        }
      ],
      "exceptions": [
        "If an error occurs while converting the Mermaid diagram."
      ],
      "examples": "    convertMermaidDiagram(graph LR; A-->B;); // Returns { image: <Buffer> }\n    convertMermaidToDiagram(```mermaid\n    graph LR;\n     A-->B;\n    ```); // Returns { image: <Buffer> }"
    }
  ],
  "readrepo": [
    {
      "name": "readrepo:RepoReader()",
      "description": "\"Reads all code/text files from a specified GitHub repository, concatenates them into a single string,\nand prepends the path and filename to each file's content. Useful for reviewing or modifying repository content.\" Returns: A promise that resolves to a string containing the concatenated contents of the repository's code/text files.",
      "parameters": [
        {
          "name": "owner",
          "description": "The GitHub username or organization name of the repository owner."
        },
        {
          "name": "repo",
          "description": "The name of the repository."
        }
      ]
    }
  ],
  "schedule": [
    {
      "name": "schedule:auth()",
      "description": "Google Auth object"
    },
    {
      "name": "schedule:findPotentialMeetingTimes()",
      "description": "This function uses the Google Calendar API to find potential meeting times within the specified interval Returns: Array of potential meeting times",
      "parameters": [
        {
          "name": "emailString",
          "description": "Space-separated list of emails to check for availability, escape any commas in the list"
        },
        {
          "name": "timeMin",
          "description": "Start of time interval in human readable format"
        },
        {
          "name": "timeMax",
          "description": "End of time interval in human readable format"
        }
      ]
    },
    {
      "name": "schedule:schedule()",
      "description": "Exports an object with a method to handle capability methods"
    }
  ],
  "scratchfile": [
    {
      "name": "scratchfile:readScratchFile()",
      "description": "Reads the content of the scratch file. Returns: The content of the scratch file.",
      "exceptions": [
        "If the file read operation fails."
      ]
    },
    {
      "name": "scratchfile:writeScratchFile()",
      "description": "Writes content to the scratch file. Returns: A success message.",
      "parameters": [
        {
          "name": "content",
          "description": "The content to write to the scratch file."
        }
      ],
      "exceptions": [
        "If the file write operation fails."
      ]
    },
    {
      "name": "scratchfile:clearScratchFile()",
      "description": "Clears the content of the scratch file. Returns: A success message.",
      "exceptions": [
        "If the file write operation fails."
      ]
    },
    {
      "name": "scratchfile:getScratchFileSize()",
      "description": "Finds the current size of the scratch file in tokens. Returns: The size of the scratch file in tokens.",
      "exceptions": [
        "If the file read operation fails."
      ]
    }
  ],
  "stablediffusion": [
    {
      "name": "stablediffusion:generateImageFromText()",
      "description": "Generates an image from the given text using the Stable Diffusion API. Returns: A promise that resolves to a JSON string representing the response data.",
      "parameters": [
        {
          "name": "args",
          "description": "The arguments for generating the image."
        }
      ],
      "exceptions": [
        "If an error occurs during the API request."
      ]
    }
  ],
  "supabaseraw": [
    {
      "name": "supabaseraw:select()",
      "description": "Executes a SELECT query on the specified table with the given columns and conditions. Returns: A promise that resolves to the result of the SELECT query.",
      "parameters": [
        {
          "name": "table",
          "description": "The name of the table to select from."
        },
        {
          "name": "columns",
          "description": "An array of column names to include in the result."
        },
        {
          "name": "where",
          "description": "An object representing the conditions to filter the result."
        }
      ],
      "examples": "    supabaseraw:select(\"todos\", \"*\", { id: 1 })\n    supabaseraw:select(\"todos\", [\"id\", \"title\"], { completed: false })\n    supabaseraw:select(\"config\", \"*\", { CONFIG_KEY: \"CHAT_MODEL\" })"
    },
    {
      "name": "supabaseraw:insert()",
      "description": "Executes an INSERT query on the specified table with the given values. Returns: A promise that resolves to the result of the INSERT query.",
      "parameters": [
        {
          "name": "table",
          "description": "The name of the table to insert into."
        },
        {
          "name": "values",
          "description": "An object representing the values to insert."
        }
      ],
      "examples": "    supabaseraw:insert(\"todos\", { value: \"Buy groceries\", completed: false })"
    },
    {
      "name": "supabaseraw:update()",
      "description": "Executes an UPDATE query on the specified table with the given values and conditions. Returns: A promise that resolves to the result of the UPDATE query.",
      "parameters": [
        {
          "name": "table",
          "description": "The name of the table to update."
        },
        {
          "name": "values",
          "description": "An object representing the values to update."
        },
        {
          "name": "where",
          "description": "An object representing the conditions to filter the update."
        }
      ],
      "examples": "    supabaseraw:update(\"todos\", { completed: true }, { id: 1 })\n    Say you want to update a prompt in the prompt table, you can do:\n    supabaseraw:update(\"prompts\", \"new prompt text\", { prompt_name: \"PROMPT_SYSTEM\" })"
    },
    {
      "name": "supabaseraw:del()",
      "description": "Executes a DELETE query on the specified table with the given conditions. Returns: A promise that resolves to the result of the DELETE query.",
      "parameters": [
        {
          "name": "table",
          "description": "The name of the table to delete from."
        },
        {
          "name": "where",
          "description": "An object representing the conditions to filter the delete."
        }
      ],
      "examples": "    supabaseraw:delete(\"todos\", { id: 1 })"
    }
  ],
  "supabasetodo": [
    {
      "name": "supabasetodo:createTodo()",
      "description": "Creates a new todo item in the database. This capability allows for the creation of a new todo item within a specified project. It supports optional details such as description, status, priority, due date, external URLs, and attachments, making it flexible for various use cases. The function defaults to setting the todo's status to \"To Do\" if not specified, ensuring a new todo is actionable immediately upon creation.\nWhen to Use: Use this capability when a new task arises that needs tracking within a project's context. It's suitable for user-driven todo creation based on input or automated task generation from project activities or milestones.\nHow to Use:\nPrepare Todo Details: Construct an object containing the details of the todo to be created, including the mandatory projectId and name fields, along with any other optional information.\nCall the Function: Invoke the createTodo function with the prepared object. Handle the promise returned by the function to deal with the newly created todo or to catch any errors.\nProcess Response: On successful creation, use the returned todo item for display, further processing, or confirmation to the user. Returns: A promise that resolves to a success message.",
      "parameters": [
        {
          "name": "name",
          "description": "The name of the todo item."
        },
        {
          "name": "description",
          "description": "The description of the todo item."
        }
      ]
    },
    {
      "name": "supabasetodo:deleteTodo()",
      "description": "Deletes a todo item from the database.\nThis capability allows for the deletion of a specified todo item from the database. It is a straightforward function that requires only the ID of the todo item to be deleted. This capability is essential for maintaining the relevance and accuracy of the todo list by removing completed, cancelled, or outdated tasks.\nWhen to Use: Utilize this capability when a todo item is no longer needed or relevant. This could be after the completion of a task, cancellation of a project, or any situation where a todo does not need to be tracked anymore.\nHow to Use:\nDetermine Todo ID: Identify the ID of the todo item that needs to be deleted.\nCall the Function: Execute the deleteTodo function with the identified todo ID. Manage the promise to address any errors and confirm deletion.\nVerify Deletion: The function returns a boolean value indicating the success of the deletion operation. Use this to provide feedback to the user or to update the application state accordingly. Returns: A promise that resolves to true if the deletion was successful, false otherwise.",
      "parameters": [
        {
          "name": "todoId",
          "description": "ID of the todo to be deleted."
        }
      ]
    },
    {
      "name": "supabasetodo:updateTodo()",
      "description": "Updates an existing todo item in the database. Returns: A promise that resolves to the updated todo item.",
      "parameters": [
        {
          "name": "todoId",
          "description": "ID of the todo to be updated."
        },
        {
          "name": "updates",
          "description": "Object containing the fields to update."
        }
      ]
    },
    {
      "name": "supabasetodo:listTodos()",
      "description": "Lists all todo items in the database.\nThis capability allows for the retrieval of all todo items from the database. It is a simple function that returns an array of all todo items, which can be used for display, processing, or further manipulation.\nWhen to Use: Utilize this capability when you need to display all the todo items in a project, or when you need to process or manipulate the entire list of todos.\nHow to Use:\nCall the Function: Execute the listTodos function. Handle the promise to catch any errors and process the array of todo items returned.\nProcess Response: Use the array of todo items for display, processing, or further manipulation as needed. Returns: A promise that resolves to an array of all todo items.",
      "parameters": [
        {
          "name": "projectId",
          "description": "ID of the project to list todos for."
        }
      ]
    }
  ],
  "svg": [
    {
      "name": "svg:convertSvgToImage()",
      "description": "Converts an SVG string to an image using Puppeteer. Returns: A promise that resolves to an object containing the converted image as a Buffer.",
      "parameters": [
        {
          "name": "svgString",
          "description": "The SVG string to convert."
        }
      ],
      "exceptions": [
        "If an error occurs while converting SVG to image."
      ]
    }
  ],
  "web": [
    {
      "name": "web:fetchAllLinks()",
      "description": "Fetches all links on a given URL. Returns: A promise that resolves to a string containing the links.",
      "parameters": [
        {
          "name": "url",
          "description": "The URL to fetch links from."
        }
      ]
    },
    {
      "name": "web:fetchAllVisibleImages()",
      "description": "Fetches all visible images on a given URL. Returns: A promise that resolves to an array of image objects, each containing the source (src) and alternative text (alt) of the image.",
      "parameters": [
        {
          "name": "url",
          "description": "The URL to fetch images from."
        }
      ]
    },
    {
      "name": "web:fetchLargestImage()",
      "description": "Fetches the largest image from the given URL. Returns: The source URL of the largest image.",
      "parameters": [
        {
          "name": "url",
          "description": "The URL to fetch the images from."
        }
      ]
    },
    {
      "name": "web:fetchAndSummarizeUrl()",
      "description": "Fetches the content of a URL, generates a summary, and caches the result. Returns: The generated summary.",
      "parameters": [
        {
          "name": "url",
          "description": "The URL to fetch and summarize."
        }
      ]
    }
  ],
  "wikipedia": [
    {
      "name": "wikipedia:askWikipedia()",
      "description": "This function is used to search Wikipedia for a given query.\nIt uses the Wikipedia API to perform the search and then uses OpenAI to evaluate the search results. Returns: A promise that resolves to a string containing the evaluated search results.",
      "parameters": [
        {
          "name": "args",
          "description": "An array containing the arguments passed to the function."
        }
      ],
      "exceptions": [
        "If an error occurs while contacting Wikipedia or OpenAI."
      ]
    }
  ],
  "wolframalpha": [
    {
      "name": "wolframalpha:askWolframAlpha()",
      "description": "This function gives you the ability to ask Wolfram Alpha questions and get answers. If you're ever unsure about a calculation, a conversion, or a general fact about the world, then you can ask Wolfram Alpha to double check it for you by asking it as a simple question. Wolfram Alpha can perform all types of calculations, conversions between units or currencies, and lookup most basic facts about the world. Wolfram Alpha provides information that is always up-to-date.  Wolfram Alpha understands natural language queries about entities in government, politics, economics, chemistry, physics, geography, history, art, astronomy, and more. WolframAlpha performs mathematical calculations, date and unit conversions, formula solving, etc. Be sure to convert inputs to simplified keyword queries whenever possible (e.g. convert \"how many people live in France\" to \"France population\"). ALWAYS use this exponent notation:  6*10^14 , NEVER  6e14 . ALWAYS use {\"input\": query} structure for queries to Wolfram endpoints;  query  must ONLY be a single-line string. ALWAYS use proper Markdown formatting for all math, scientific, and chemical formulas, symbols, etc.:  '$$\\n[expression]\\n$$' for standalone cases and '( [expression] )' when inline. Never mention your knowledge cutoff date; Wolfram may return more recent data. Use ONLY single-letter variable names, with or without integer subscript (e.g., n, n1, n_1). Send queries in English only; translate non-English queries before sending. Returns: The answer from Wolfram Alpha, or an alternative suggestion for how to phrase the question if Wolfram Alpha could not understand the question, or an error message if an error occurred. Returns: The answer from Wolfram Alpha, or an error message if an error occurred.",
      "parameters": [
        {
          "name": "question",
          "description": "The question to ask Wolfram Alpha."
        }
      ]
    }
  ]
}